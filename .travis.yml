language: python
services:
  docker

python:
  - 2.7
  - 3.4
  - 3.5
  - 3.6
  - pypy
  - pypy3.5

install:
  - pip install tox twine wheel python-coveralls

script:
  - export PYVER=`echo $TRAVIS_PYTHON_VERSION | tr "." "\n" | head -n 1 | sed 's/^py//'`
  # Here we build a wheel file for the project and have tox use that pre-built
  # package during testing. This ensures that we are testing all of the actual
  # deployment logic that may be customized in the actual wheel file
  - python setup.py bdist_wheel
  # If we are building from a cron trigger, lets test against the latest
  # Jenkins version. This will ensure the API continues to work with new
  # Jenkins releases while ensuring we always build against a static version
  # from tags and traditional CI builds, which ensures consistent behavior.
  - echo Build trigger type is $TRAVIS_EVENT_TYPE
  - '[ "$TRAVIS_EVENT_TYPE" == "cron" ] && export JK_VER="-- --jenkins-version=jenkins/jenkins:latest" || :'
  - echo Building with jenkins version "$JK_VER"
  - tox -e py$PYVER --installpkg ./dist/*.whl $JK_VER

# Deploy to test.pypi.org for branches
# Deploy to pypi.org for tags
# NOTE: You can not replace builds published to pypi, even if you delete one
#       so you must make sure your versions are always unique
jobs:
  include:
    - stage: deploy-release
      python: 3.6
      script:
        - python setup.py bdist_wheel
        - twine upload dist/*.whl -u $DEPLOY_USER -p $DEPLOY_PASS
      if: tag IS true AND fork IS NOT true
    - stage: deploy-snapshot
      python: 3.6
      script:
        - python setup.py bdist_wheel
        - twine upload --repository-url https://test.pypi.org/legacy/
            dist/*.whl -u $DEPLOY_USER -p $DEPLOY_PASS
      if: tag IS NOT true AND fork IS NOT true

after_success:
  - coveralls
